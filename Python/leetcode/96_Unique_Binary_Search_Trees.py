"""
给定一个整数 n，求以 1 ... n 为节点组成的二叉搜索树有多少种？

示例:

输入: 3
输出: 5
解释:
给定 n = 3, 一共有 5 种不同结构的二叉搜索树:

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3
"""

"""
一维动态规划
"""

class Solution:
    def numTrees(self, n):
        """
        :type n: int
        :rtype: int
        """
        dp = [0] * (n+1)
        dp[0] = 1
        # 记录每个 n 的结果,从小往大记录结果
        for i in range(1, n+1):
            # 求 n 的过程
            # 对于目标n，根节点可以是1, 2, ..., n中的任意一个，假设根节点为k，
            # 那么左子树的可能性就是numTrees(k-1)种，右子树的可能性就是numTrees(n-k)种，
            # 他们的乘积就根节点为k时整个树的可能性。把所有k的可能性累加就是最终结果。
            for j in range(1, i + 1):
                dp[i] += dp[j - 1] * dp[i - j]
        return dp[n]